/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package ru.vlsu.kyrsach2.api;

import ru.vlsu.kyrsach2.model.User;

import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-06-03T16:01:50.300+03:00")

@Api(value = "user", description = "the user API")
public interface UserApi {

    @ApiOperation(value = "Get user by username", notes = "", response = User.class, tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = User.class),
        @ApiResponse(code = 400, message = "Invalid username supplied", response = Void.class),
        @ApiResponse(code = 404, message = "User not found", response = Void.class) })
    
    @RequestMapping(value = "/user/{username}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<User> getUserByName(@ApiParam(value = "The name that needs to be fetched",required=true ) @PathVariable("username") String username) {
        // do some magic!
        return new ResponseEntity<User>(HttpStatus.OK);
    }


    @ApiOperation(value = "Get all users in role", notes = "", response = User.class, responseContainer = "List", tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = User.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid role supplied", response = Void.class),
        @ApiResponse(code = 404, message = "Users are not found", response = Void.class) })
    
    @RequestMapping(value = "/user/role/{rolename}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<User>> getUsersInRole(@ApiParam(value = "The role that needs to be fetched",required=true ) @PathVariable("rolename") String rolename) {
        // do some magic!
        return new ResponseEntity<List<User>>(HttpStatus.OK);
    }


    @ApiOperation(value = "Log into system", notes = "Log into system", response = Void.class, tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Void.class) })
    
    @RequestMapping(value = "/user/login",
        produces = { "application/json" }, 
        consumes = { "application/x-www-form-urlencoded" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> loginUser(@ApiParam(value = "user login", required=true) @RequestPart(value="username", required=true)  String username,@ApiParam(value = "user password", required=true) @RequestPart(value="password", required=true)  String password) {
        // do some magic!
        return new ResponseEntity<Void>(HttpStatus.OK);
    }


    @ApiOperation(value = "Create user", notes = "Create New User", response = Void.class, tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Void.class) })
    
    @RequestMapping(value = "/user/register",
        produces = { "application/json" }, 
        consumes = { "application/x-www-form-urlencoded" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> userRegisterPost(@ApiParam(value = "user login", required=true) @RequestPart(value="username", required=true)  String username,@ApiParam(value = "user password", required=true) @RequestPart(value="password", required=true)  String password,@ApiParam(value = "user firstName", required=true) @RequestPart(value="name", required=true)  String name,@ApiParam(value = "user lastname", required=true) @RequestPart(value="surename", required=true)  String surename,@ApiParam(value = "user phone number", required=true) @RequestPart(value="phone", required=true)  String phone) {
        // do some magic!
        return new ResponseEntity<Void>(HttpStatus.OK);
    }

}
